{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/BlueLake/source/apple-touch-icon.png","path":"apple-touch-icon.png","modified":0,"renderable":1},{"_id":"themes/BlueLake/source/favicon.ico","path":"favicon.ico","modified":0,"renderable":1},{"_id":"themes/BlueLake/source/css/highlight.styl","path":"css/highlight.styl","modified":0,"renderable":1},{"_id":"themes/BlueLake/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/BlueLake/source/iconfont/iconfont.svg","path":"iconfont/iconfont.svg","modified":0,"renderable":1},{"_id":"themes/BlueLake/source/iconfont/iconfont.eot","path":"iconfont/iconfont.eot","modified":0,"renderable":1},{"_id":"themes/BlueLake/source/iconfont/iconfont.ttf","path":"iconfont/iconfont.ttf","modified":0,"renderable":1},{"_id":"themes/BlueLake/source/iconfont/iconfont.woff","path":"iconfont/iconfont.woff","modified":0,"renderable":1},{"_id":"themes/BlueLake/source/js/search.json.js","path":"js/search.json.js","modified":0,"renderable":1},{"_id":"themes/BlueLake/source/js/toctotop.js","path":"js/toctotop.js","modified":0,"renderable":1},{"_id":"themes/BlueLake/source/js/totop.js","path":"js/totop.js","modified":0,"renderable":1},{"_id":"themes/BlueLake/source/img/bg.jpg","path":"img/bg.jpg","modified":0,"renderable":1}],"Cache":[{"_id":"themes/BlueLake/README.en.md","hash":"6cc6e346635bf26dd71030b9c3c6443507cd4108","modified":1517882480948},{"_id":"themes/BlueLake/LICENSE","hash":"4c3927c82d0aa4fac5cdf945e07afe5e24335891","modified":1517882480948},{"_id":"themes/BlueLake/README.md","hash":"66c3ef7a779b6d65bad90daa2e03bcb7a1bb742f","modified":1517882480949},{"_id":"themes/BlueLake/_config.yml","hash":"5baf7e3dcf77588223fcbe662b07ad62023b43bf","modified":1517886451414},{"_id":"themes/BlueLake/package.json","hash":"cdef382c442618b24305fd3e38ac7a3accf87aa9","modified":1517882480956},{"_id":"source/_posts/Dagger2.md","hash":"566037caf585f238eec0d236c634ffffcbfd5fdf","modified":1517886607005},{"_id":"themes/BlueLake/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1517882480940},{"_id":"themes/BlueLake/.git/config","hash":"05165d804714e9c1a0e5d4a99a95a77f34d4fac6","modified":1517882480943},{"_id":"themes/BlueLake/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1517882477479},{"_id":"themes/BlueLake/.git/index","hash":"fe3d8040723435f9b49be2f5605e66ddce03c3e7","modified":1517882480961},{"_id":"themes/BlueLake/.git/packed-refs","hash":"842a64dcd40e108353d1da6314a0c447e35b921d","modified":1517882480937},{"_id":"themes/BlueLake/languages/de-DE.yml","hash":"d7f5842295509746f878e627c4c7e298f3f1613a","modified":1517884275631},{"_id":"themes/BlueLake/languages/en.yml","hash":"95bac2c366505d016b5defc47370679b9f5f3c4b","modified":1517882480949},{"_id":"themes/BlueLake/languages/es-ES.yml","hash":"baa68725feeec6643f875a532a9d55ba8aacdb2c","modified":1517882480950},{"_id":"themes/BlueLake/languages/fr-FR.yml","hash":"bd97d5e4b39d30da1644b90256dfc4e6b1d76988","modified":1517882480950},{"_id":"themes/BlueLake/languages/ko.yml","hash":"fc8826724f570136d9a2d3ec2705b7b7000e0f14","modified":1517882480950},{"_id":"themes/BlueLake/languages/tr.yml","hash":"5f13d55fdd5bdd1115075736e3e26a1ea1dd1dea","modified":1517882480950},{"_id":"themes/BlueLake/languages/zh-CN.yml","hash":"d7f5842295509746f878e627c4c7e298f3f1613a","modified":1517882480950},{"_id":"themes/BlueLake/languages/zh-TW.yml","hash":"d4d587ba81864910715c0c3879605cc6a9362e09","modified":1517882480951},{"_id":"themes/BlueLake/layout/archive.jade","hash":"98d9fb812edbc180878fdadb65bc38499eef2cc4","modified":1517882480955},{"_id":"themes/BlueLake/layout/base.jade","hash":"ee19d63543f898336dee846ed45d932239c40fe0","modified":1517882480955},{"_id":"themes/BlueLake/layout/category.jade","hash":"9f3a9f1d6f0bbad258b308ad8d49128c05b422cf","modified":1517882480955},{"_id":"themes/BlueLake/layout/index.jade","hash":"dd81d9f7a6b388de2ab731b17b3ba55f70df4a5f","modified":1517882480955},{"_id":"themes/BlueLake/layout/page.jade","hash":"415404398931d98db28bff723886b07dcb8bbbc3","modified":1517882480955},{"_id":"themes/BlueLake/layout/post.jade","hash":"0305258c33e4d02f977ee1aaf7f2429b993fda17","modified":1517882480956},{"_id":"themes/BlueLake/layout/tag.jade","hash":"50c7af7565751db5d7672beb434768885fb224cb","modified":1517882480956},{"_id":"themes/BlueLake/source/apple-touch-icon.png","hash":"98f0ecbdcdc1a0e8e52f4d786cbc011e5e06fa65","modified":1517882480956},{"_id":"themes/BlueLake/source/favicon.ico","hash":"94e5d25d942bff5479470322454c951f2ddebac6","modified":1517882480957},{"_id":"themes/BlueLake/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1517882477480},{"_id":"themes/BlueLake/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1517882477480},{"_id":"themes/BlueLake/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1517882477481},{"_id":"themes/BlueLake/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1517882477481},{"_id":"themes/BlueLake/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1517882477482},{"_id":"themes/BlueLake/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1517882477482},{"_id":"themes/BlueLake/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1517882477482},{"_id":"themes/BlueLake/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1517882477483},{"_id":"themes/BlueLake/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1517882477483},{"_id":"themes/BlueLake/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1517882477484},{"_id":"themes/BlueLake/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1517882477484},{"_id":"themes/BlueLake/.git/logs/HEAD","hash":"2f7a0fbd99e0608fd3683ee2a67d30c4c23e234e","modified":1517882480941},{"_id":"themes/BlueLake/layout/_partial/after_footer.jade","hash":"3f11d2b5a4c647bf2b37c4d00bdc250cda80b770","modified":1517882480951},{"_id":"themes/BlueLake/layout/_partial/comment_count.jade","hash":"21d05990aa5a19632f9ed51085ef7727adeea17a","modified":1517882480951},{"_id":"themes/BlueLake/layout/_partial/comments.jade","hash":"c1f1955d12aee22a931a3f4ad9d0e9a408e80f3c","modified":1517882480951},{"_id":"themes/BlueLake/layout/_partial/comments_js.jade","hash":"d970c81b5cdbd7c0348ee28e93bcbb006d613b6d","modified":1517882480952},{"_id":"themes/BlueLake/layout/_partial/footer.jade","hash":"e0aa5d7adc1218a324a484abe3513e9545f89067","modified":1517882480952},{"_id":"themes/BlueLake/layout/_partial/helpers.jade","hash":"9e44f6d32f2449b4109c33118f8285fa2fc7b023","modified":1517882480952},{"_id":"themes/BlueLake/layout/_partial/mathjax2.jade","hash":"234a792e64ba208fa97d2f99772ece23056a53ec","modified":1517882480952},{"_id":"themes/BlueLake/layout/_partial/mathjax.jade","hash":"ac6e3a92bf18ab6bbd0e041b6796b295bae963ee","modified":1517882480952},{"_id":"themes/BlueLake/layout/_partial/paginator.jade","hash":"03ad0c49ae6f8a999ae35b38d08e25775f51f52a","modified":1517882480952},{"_id":"themes/BlueLake/layout/_partial/search.jade","hash":"4f2fba7fcb39a6bf70ff04dad9a3dab2563b21e7","modified":1517882480953},{"_id":"themes/BlueLake/layout/_partial/post_nav.jade","hash":"b11d9e6000449838b17f508429f29ffb60f53096","modified":1517882480953},{"_id":"themes/BlueLake/layout/_partial/share.jade","hash":"ba0839518db2cb9dafee67ca5e471219bfba2e90","modified":1517882480953},{"_id":"themes/BlueLake/layout/_partial/tag.jade","hash":"6145b483b271bba05ad1db7c039fe352a768215b","modified":1517882480953},{"_id":"themes/BlueLake/layout/_partial/totop.jade","hash":"c632919f04194dcf6e0e8ccc572554a859aa922b","modified":1517882480953},{"_id":"themes/BlueLake/layout/_widget/archive.jade","hash":"6e587b7d254d0d92b959ba58262f5e81b618eba2","modified":1517882480953},{"_id":"themes/BlueLake/layout/_widget/category.jade","hash":"0107affa0c6b22e09546fcf82a6f71ba2dd1e315","modified":1517882480954},{"_id":"themes/BlueLake/layout/_widget/links.jade","hash":"9af40206a525db1cb9761fa6facb36332057acf3","modified":1517882480954},{"_id":"themes/BlueLake/layout/_widget/recent_comments.jade","hash":"164a83faaf92ec19d268fd303bf6e30348ddef5c","modified":1517882480954},{"_id":"themes/BlueLake/layout/_widget/recent_posts.jade","hash":"c6f778d5d2f13bacbd83a56a9e9faaeac0dda0ed","modified":1517882480954},{"_id":"themes/BlueLake/layout/_widget/tag.jade","hash":"c75308c2b72456cfb98cb80f280c66e58f171705","modified":1517882480954},{"_id":"themes/BlueLake/layout/_widget/weibo.jade","hash":"4e90378aa88c5694126dc8ea5bed3bb2f8642e53","modified":1517882480954},{"_id":"themes/BlueLake/source/css/highlight.styl","hash":"92b5c306f276f8ea6a134e303b1b63612d25ecfe","modified":1517882480957},{"_id":"themes/BlueLake/source/css/style.styl","hash":"45776bc176bc8ed0d664e953e23d6a0a9a030929","modified":1517882480957},{"_id":"themes/BlueLake/source/iconfont/iconfont.svg","hash":"a910f5840f8e25b7a6e5c47b9a04ae49b9db8c32","modified":1517882480958},{"_id":"themes/BlueLake/source/iconfont/iconfont.eot","hash":"e664dd848ca65fe3aca4acfc234ff9c18ffd4c33","modified":1517882480958},{"_id":"themes/BlueLake/source/iconfont/iconfont.ttf","hash":"5770696cc0d19d9c9479912a5cf54c9dd4ab24c4","modified":1517882480959},{"_id":"themes/BlueLake/source/iconfont/iconfont.woff","hash":"df2bd849134cbd02beb385e5061a30b923c99058","modified":1517882480959},{"_id":"themes/BlueLake/source/js/search.json.js","hash":"7ce826f7b678ff3c524fce8bbd480c188e50c7ee","modified":1517882480960},{"_id":"themes/BlueLake/source/js/toctotop.js","hash":"9e68d688f2f12ec193ce9496beb0fd42e1de2288","modified":1517882480960},{"_id":"themes/BlueLake/source/js/totop.js","hash":"d9367c6fa3e973bc5f32ce38d951858455726a02","modified":1517882480961},{"_id":"themes/BlueLake/source/img/bg.jpg","hash":"d23d92484e98adcbea7266ebfdfef7fb3fc42ee0","modified":1517882480960},{"_id":"themes/BlueLake/.git/objects/pack/pack-3960201a6b68eb8fa7ccb74fce2c388277a0b0ef.idx","hash":"72b864447dcf0acf0212056587453d6cbed114af","modified":1517882480900},{"_id":"themes/BlueLake/.git/refs/heads/master","hash":"c292cfc66fa6a171bcb9e25157b4ee8f09da6755","modified":1517882480941},{"_id":"themes/BlueLake/.git/logs/refs/heads/master","hash":"2f7a0fbd99e0608fd3683ee2a67d30c4c23e234e","modified":1517882480942},{"_id":"themes/BlueLake/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1517882480939},{"_id":"themes/BlueLake/.git/logs/refs/remotes/origin/HEAD","hash":"2f7a0fbd99e0608fd3683ee2a67d30c4c23e234e","modified":1517882480939},{"_id":"themes/BlueLake/.git/objects/pack/pack-3960201a6b68eb8fa7ccb74fce2c388277a0b0ef.pack","hash":"dba040ba1c38e38283e16f9ff438852ac811a55a","modified":1517882480903},{"_id":"public/apple-touch-icon.png","hash":"98f0ecbdcdc1a0e8e52f4d786cbc011e5e06fa65","modified":1517886563125},{"_id":"public/favicon.ico","hash":"94e5d25d942bff5479470322454c951f2ddebac6","modified":1517886563125},{"_id":"public/iconfont/iconfont.eot","hash":"e664dd848ca65fe3aca4acfc234ff9c18ffd4c33","modified":1517886563126},{"_id":"public/iconfont/iconfont.svg","hash":"a910f5840f8e25b7a6e5c47b9a04ae49b9db8c32","modified":1517886563126},{"_id":"public/iconfont/iconfont.ttf","hash":"5770696cc0d19d9c9479912a5cf54c9dd4ab24c4","modified":1517886563126},{"_id":"public/iconfont/iconfont.woff","hash":"df2bd849134cbd02beb385e5061a30b923c99058","modified":1517886563126},{"_id":"public/css/highlight.css","hash":"fb0403feb34cc8bb8b1f28f238540d36588b86df","modified":1517886563377},{"_id":"public/js/search.json.js","hash":"a0e8dfee9b9845aabd64360d497df7c0767b7235","modified":1517886563378},{"_id":"public/js/toctotop.js","hash":"ad6386bc746ff375715ca9da17af4716ea86e06a","modified":1517886563378},{"_id":"public/js/totop.js","hash":"5b1131830209c2daaf6fe34c5e39ab7c1059bfa4","modified":1517886563378},{"_id":"public/css/style.css","hash":"0b87f0674cad37ed4006f989cca7e1cd9f9568a3","modified":1517886563378},{"_id":"public/img/bg.jpg","hash":"d23d92484e98adcbea7266ebfdfef7fb3fc42ee0","modified":1517886563379},{"_id":"public/archives/index.html","hash":"a5debdb7e0630fa01ff7140ab66829d01d6fca18","modified":1517886610793},{"_id":"public/archives/2016/index.html","hash":"a5debdb7e0630fa01ff7140ab66829d01d6fca18","modified":1517886610793},{"_id":"public/archives/2016/06/index.html","hash":"a5debdb7e0630fa01ff7140ab66829d01d6fca18","modified":1517886610793},{"_id":"public/categories/Hexo教程/index.html","hash":"8433da5d5e5c36a4361b5e270ab4a88ec6d172b7","modified":1517886610793},{"_id":"public/index.html","hash":"4d6f30b11485f68bc838785d847ec7cba2eb6ea2","modified":1517886610793},{"_id":"public/tags/标签1/index.html","hash":"0b315291a7e58e646f82d3702a02bd7744f18f00","modified":1517886610794},{"_id":"public/tags/标签2/index.html","hash":"5c2586580076890940557fe8f4ab08b5ce2bdaf4","modified":1517886610794},{"_id":"public/2016/06/01/Dagger2/index.html","hash":"fbecb76ba8e360e18b04def7358fbd8b0c26707b","modified":1517886610794}],"Category":[{"name":"Hexo教程","_id":"cjdb2hwf20001w4iemynayh7c"},{"name":"Android三方框架学习","_id":"cjdb2k7im000020ie3bo1cdfo"}],"Data":[],"Page":[],"Post":[{"title":"Dagger2的好处","date":"2016-06-01T15:47:44.000Z","_content":"[TOC]\n\n\n### Dagger2的好处\n\n- 依赖的注入和配置独立于组件之外。\n- 因为对象是在一个独立、不耦合的地方初始化，所以当注入抽象方法的时候，我们只需要修改对象的实现方法，而不用大改代码库。\n- 依赖可以注入到一个组件中：我们可以注入这些依赖的模拟实现，这样使得测试更加简单。\n\n\n### 相关标签\n\n **@Inject、@Module、@Provide、@Component**\n\n- @Inject: 通常在需要依赖的地方使用这个注解。换句话说，你用它告诉Dagger这个类或者字段需要依赖注入。这样，Dagger就会构造一个这个类的实例并满足他们的依赖。\n\n- @Module: Modules类里面的方法专门提供依赖，所以我们定义一个类，用@Module注解，这样Dagger在构造类的实例的时候，就知道从哪里去找到需要的依赖。modules的一个重要特征是它们设计为分区并组合在一起（比如说，在我们的app中可以有多个组成在一起的modules）。\n\n- @Provide: 在modules中，我们定义的方法是用这个注解，以此来告诉Dagger我们想要构造对象并提供这些依赖。\n\n- @Component: Components从根本上来说就是一个注入器，也可以说是@Inject和@Module的桥梁，它的主要作用就是连接这两个部分。 Components可以提供所有定义了的类型的实例，比如：我们必须用@Component注解一个接口然后列出所有的@Modules组成该组件，如果缺失了任何一块都会在编译的时候报错。所有的组件都可以通过它的modules知道依赖的范围。\n\n\n### 标签使用方式\n\n**1.@Inject**  \n\n    public class User {  \n  \n\t    ....  \n\t    ....  \n\t    //在被依赖类中使用@Inject标记该类的构造方法\n\t    @Inject  \n\t    public User() {  \n\t    }  \n\t  \n\t    ....  \n\t    ....    \n\t}  \n\n--------------\n\n    public class MainActivity extends AppCompatActivity {  \n\t\t  \n\t    //在依赖类中使用@Inject来注入被依赖类实例\n\t    @Inject  \n\t    User user;  \n\t    @Inject  \n\t    User user2;  \n\t    private TextView tv;  \n\t    private TextView tv2;  \n\t  \n\t    @Override  \n\t    protected void onCreate(Bundle savedInstanceState) {  \n\t        super.onCreate(savedInstanceState);  \n\t        setContentView(R.layout.activity_main);  \n\t        //实例component，并通过其inject（）方法来对成员变量（通过@Inject进行表述的）进行赋值\n\t        DaggerActivityComponent.builder().build().inject(this);  \n\t        tv = ((TextView) findViewById(R.id.tv));  \n\t        tv2 = ((TextView) findViewById(R.id.tv2));  \n\t        tv.setText(user.toString());  \n\t        tv2.setText(user2.toString());  \n\t    }  \n\t} \n\n**2.@Component**\n\t\t\n    @Component  \n\tpublic interface ActivityComponent {  \n\t    void inject(MainActivity activity);  \n\t}  \n\n**3.@Provider & @Module**\n\n    @Module  \n\tpublic class UserModule {  \n\t    @Provides\n\t    User providesUser() {  \n\t        return new User();  \n\t    }  \n\t}  \n\n\n\n### 注入方式\n- 构造方法注入：在类的构造方法前面注释@Inject\n- 成员变量注入：在类的成员变量（非私有）前面注释@Inject\n- 函数方法注入：在函数前面注释@Inject\n\n\n### 不同类的关系\n\n![enter image description here](http://or9mw8j7a.bkt.clouddn.com/%E6%9C%AA%E6%A0%87%E9%A2%98-2-%E6%81%A2%E5%A4%8D%E7%9A%84.png)\n\n\n### 编译后的生成文件与原文件及关系图\n\n**原文件**\n![enter image description here](http://or9mw8j7a.bkt.clouddn.com/%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20170818105449.png)\n\n**生成文件**\n![enter image description here](http://or9mw8j7a.bkt.clouddn.com/%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20170818105426.png)\n\n**各文件对应关系**\n![enter image description here](http://or9mw8j7a.bkt.clouddn.com/%E7%BC%96%E8%AF%91%E5%90%8E%E5%85%B3%E7%B3%BB%E5%9B%BE.png)\n\n\n###  注入路径\n\n![enter image description here](http://or9mw8j7a.bkt.clouddn.com/%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20170818112230.png)\n\n![enter image description here](http://or9mw8j7a.bkt.clouddn.com/%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20170818111938.png)\n\n![enter image description here](http://or9mw8j7a.bkt.clouddn.com/%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20170818112629.png)\n\n\n\n### @Scope（用于划分作用域）\n\n**javax包中自带的@Singleton,其class如下：**\n\n![enter image description here](http://or9mw8j7a.bkt.clouddn.com/%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20170818113850.png)\n\n**用户自己写的**\n\n![enter image description here](http://or9mw8j7a.bkt.clouddn.com/%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20170818114133.png)\n\n***可以看出除了少了@Documented标签外，用户自己写的Scope标签和@Singleton并没有本质的区别***\n\n#### 各标签的意义\n\n**@Retention**\n\nRetention(保留)注解说明,这种类型的注解会被保留到那个阶段. 有三个值:\n1.RetentionPolicy.SOURCE —— 这种类型的Annotations只在源代码级别保留,编译时就会被忽略\n2.RetentionPolicy.CLASS —— 这种类型的Annotations编译时被保留,在class文件中存在,但JVM将会忽略\n3.RetentionPolicy.RUNTIME —— 这种类型的Annotations将被JVM保留,所以他们能在运行时被JVM或其他使用反射机制的代码所读取和使用.\n\n**@Documented**\n\nDocumented 注解表明这个注解应该被 javadoc工具记录. 默认情况下,javadoc是不包括注解的. 但如果声明注解时指定了 @Documented,则它会被 javadoc 之类的工具处理, 所以注解类型信息也会被包括在生成的文档中. 示例6进一步演示了使用 \n\n\n**@Scope**\n\n![enter image description here](http://or9mw8j7a.bkt.clouddn.com/%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20170818114808.png)\n\n\n\n### @Singleton的单例模式是如何起作用的（我只是个栗子）\n\n该单例模式的前提是所使用的Component实例是同一个的情况下，而且任何自定义的Scope标签都有相同功能，具体实现如下：\n\n![enter image description here](http://or9mw8j7a.bkt.clouddn.com/%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20170818141827.png)\n\n\n![enter image description here](http://or9mw8j7a.bkt.clouddn.com/%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20170818142004.png)\n\n\n### @Qualifier的巧用（指哪打哪）\n\n@Qualifier是用来给注解做注解的。它告诉Dagger依赖需求方 创建数据的时候使用哪个依赖提供方。\n\n两个@Qualifier\n\n    @Qualifier\n\tpublic @interface ThemeNight {\n\t\n\t}\n\t\n\t@Qualifier\n\tpublic @interface ThemeDay {\n\t}\n\n-----------------------\n\n    @Module\n\tpublic class ThemeModule {\n\t    @Provides\n\t    @ThemeDay\n\t    Theme provideDayTheme() {\n\t        return new Theme(\"day\");\n\t    }\n\n\t    @Provides\n\t    @ThemeNight\n\t    Theme provideNightTheme() {\n\t        return new Theme(\"night\");\n\t    }\n\t}\n\n------------------\n\n    @Component\n    public interface ThemeComponent{\n\t    void inject(ThemeTest themeTest);\n    }\n    \n\n--------------------\n\n    public class ThemeTest {\n\t    @Inject\n\t    @ThemeDay\n\t    Theme dayTheme;\n\t    @Inject\n\t    @ThemeNight\n\t    Theme nightTheme;\n\n\t    public static void main(String[] arg) {\n\t        ThemeTest themeTest = new ThemeTest();\n\t        DaggerThemeComponent.create().inject(themeTest);\n\t        System.out.println(themeTest.dayTheme.themeName);\n\t        System.out.println(themeTest.nightTheme.themeName);\n\t    }\n\t}\n\n\n\n","source":"_posts/Dagger2.md","raw":"---\ntitle: Dagger2的好处\ndate: 2016-06-01 23:47:44\ncategories: \"Android三方框架学习\"\ntags:\n     - Android\n     - 三方框架\n     - 技术\n---\n[TOC]\n\n\n### Dagger2的好处\n\n- 依赖的注入和配置独立于组件之外。\n- 因为对象是在一个独立、不耦合的地方初始化，所以当注入抽象方法的时候，我们只需要修改对象的实现方法，而不用大改代码库。\n- 依赖可以注入到一个组件中：我们可以注入这些依赖的模拟实现，这样使得测试更加简单。\n\n\n### 相关标签\n\n **@Inject、@Module、@Provide、@Component**\n\n- @Inject: 通常在需要依赖的地方使用这个注解。换句话说，你用它告诉Dagger这个类或者字段需要依赖注入。这样，Dagger就会构造一个这个类的实例并满足他们的依赖。\n\n- @Module: Modules类里面的方法专门提供依赖，所以我们定义一个类，用@Module注解，这样Dagger在构造类的实例的时候，就知道从哪里去找到需要的依赖。modules的一个重要特征是它们设计为分区并组合在一起（比如说，在我们的app中可以有多个组成在一起的modules）。\n\n- @Provide: 在modules中，我们定义的方法是用这个注解，以此来告诉Dagger我们想要构造对象并提供这些依赖。\n\n- @Component: Components从根本上来说就是一个注入器，也可以说是@Inject和@Module的桥梁，它的主要作用就是连接这两个部分。 Components可以提供所有定义了的类型的实例，比如：我们必须用@Component注解一个接口然后列出所有的@Modules组成该组件，如果缺失了任何一块都会在编译的时候报错。所有的组件都可以通过它的modules知道依赖的范围。\n\n\n### 标签使用方式\n\n**1.@Inject**  \n\n    public class User {  \n  \n\t    ....  \n\t    ....  \n\t    //在被依赖类中使用@Inject标记该类的构造方法\n\t    @Inject  \n\t    public User() {  \n\t    }  \n\t  \n\t    ....  \n\t    ....    \n\t}  \n\n--------------\n\n    public class MainActivity extends AppCompatActivity {  \n\t\t  \n\t    //在依赖类中使用@Inject来注入被依赖类实例\n\t    @Inject  \n\t    User user;  \n\t    @Inject  \n\t    User user2;  \n\t    private TextView tv;  \n\t    private TextView tv2;  \n\t  \n\t    @Override  \n\t    protected void onCreate(Bundle savedInstanceState) {  \n\t        super.onCreate(savedInstanceState);  \n\t        setContentView(R.layout.activity_main);  \n\t        //实例component，并通过其inject（）方法来对成员变量（通过@Inject进行表述的）进行赋值\n\t        DaggerActivityComponent.builder().build().inject(this);  \n\t        tv = ((TextView) findViewById(R.id.tv));  \n\t        tv2 = ((TextView) findViewById(R.id.tv2));  \n\t        tv.setText(user.toString());  \n\t        tv2.setText(user2.toString());  \n\t    }  \n\t} \n\n**2.@Component**\n\t\t\n    @Component  \n\tpublic interface ActivityComponent {  \n\t    void inject(MainActivity activity);  \n\t}  \n\n**3.@Provider & @Module**\n\n    @Module  \n\tpublic class UserModule {  \n\t    @Provides\n\t    User providesUser() {  \n\t        return new User();  \n\t    }  \n\t}  \n\n\n\n### 注入方式\n- 构造方法注入：在类的构造方法前面注释@Inject\n- 成员变量注入：在类的成员变量（非私有）前面注释@Inject\n- 函数方法注入：在函数前面注释@Inject\n\n\n### 不同类的关系\n\n![enter image description here](http://or9mw8j7a.bkt.clouddn.com/%E6%9C%AA%E6%A0%87%E9%A2%98-2-%E6%81%A2%E5%A4%8D%E7%9A%84.png)\n\n\n### 编译后的生成文件与原文件及关系图\n\n**原文件**\n![enter image description here](http://or9mw8j7a.bkt.clouddn.com/%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20170818105449.png)\n\n**生成文件**\n![enter image description here](http://or9mw8j7a.bkt.clouddn.com/%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20170818105426.png)\n\n**各文件对应关系**\n![enter image description here](http://or9mw8j7a.bkt.clouddn.com/%E7%BC%96%E8%AF%91%E5%90%8E%E5%85%B3%E7%B3%BB%E5%9B%BE.png)\n\n\n###  注入路径\n\n![enter image description here](http://or9mw8j7a.bkt.clouddn.com/%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20170818112230.png)\n\n![enter image description here](http://or9mw8j7a.bkt.clouddn.com/%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20170818111938.png)\n\n![enter image description here](http://or9mw8j7a.bkt.clouddn.com/%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20170818112629.png)\n\n\n\n### @Scope（用于划分作用域）\n\n**javax包中自带的@Singleton,其class如下：**\n\n![enter image description here](http://or9mw8j7a.bkt.clouddn.com/%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20170818113850.png)\n\n**用户自己写的**\n\n![enter image description here](http://or9mw8j7a.bkt.clouddn.com/%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20170818114133.png)\n\n***可以看出除了少了@Documented标签外，用户自己写的Scope标签和@Singleton并没有本质的区别***\n\n#### 各标签的意义\n\n**@Retention**\n\nRetention(保留)注解说明,这种类型的注解会被保留到那个阶段. 有三个值:\n1.RetentionPolicy.SOURCE —— 这种类型的Annotations只在源代码级别保留,编译时就会被忽略\n2.RetentionPolicy.CLASS —— 这种类型的Annotations编译时被保留,在class文件中存在,但JVM将会忽略\n3.RetentionPolicy.RUNTIME —— 这种类型的Annotations将被JVM保留,所以他们能在运行时被JVM或其他使用反射机制的代码所读取和使用.\n\n**@Documented**\n\nDocumented 注解表明这个注解应该被 javadoc工具记录. 默认情况下,javadoc是不包括注解的. 但如果声明注解时指定了 @Documented,则它会被 javadoc 之类的工具处理, 所以注解类型信息也会被包括在生成的文档中. 示例6进一步演示了使用 \n\n\n**@Scope**\n\n![enter image description here](http://or9mw8j7a.bkt.clouddn.com/%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20170818114808.png)\n\n\n\n### @Singleton的单例模式是如何起作用的（我只是个栗子）\n\n该单例模式的前提是所使用的Component实例是同一个的情况下，而且任何自定义的Scope标签都有相同功能，具体实现如下：\n\n![enter image description here](http://or9mw8j7a.bkt.clouddn.com/%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20170818141827.png)\n\n\n![enter image description here](http://or9mw8j7a.bkt.clouddn.com/%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20170818142004.png)\n\n\n### @Qualifier的巧用（指哪打哪）\n\n@Qualifier是用来给注解做注解的。它告诉Dagger依赖需求方 创建数据的时候使用哪个依赖提供方。\n\n两个@Qualifier\n\n    @Qualifier\n\tpublic @interface ThemeNight {\n\t\n\t}\n\t\n\t@Qualifier\n\tpublic @interface ThemeDay {\n\t}\n\n-----------------------\n\n    @Module\n\tpublic class ThemeModule {\n\t    @Provides\n\t    @ThemeDay\n\t    Theme provideDayTheme() {\n\t        return new Theme(\"day\");\n\t    }\n\n\t    @Provides\n\t    @ThemeNight\n\t    Theme provideNightTheme() {\n\t        return new Theme(\"night\");\n\t    }\n\t}\n\n------------------\n\n    @Component\n    public interface ThemeComponent{\n\t    void inject(ThemeTest themeTest);\n    }\n    \n\n--------------------\n\n    public class ThemeTest {\n\t    @Inject\n\t    @ThemeDay\n\t    Theme dayTheme;\n\t    @Inject\n\t    @ThemeNight\n\t    Theme nightTheme;\n\n\t    public static void main(String[] arg) {\n\t        ThemeTest themeTest = new ThemeTest();\n\t        DaggerThemeComponent.create().inject(themeTest);\n\t        System.out.println(themeTest.dayTheme.themeName);\n\t        System.out.println(themeTest.nightTheme.themeName);\n\t    }\n\t}\n\n\n\n","slug":"Dagger2","published":1,"updated":"2018-02-06T03:11:58.433Z","_id":"cjdb2hwev0000w4ie3k11iwq1","comments":1,"layout":"post","photos":[],"link":"","content":"<p>[TOC]</p>\n<h3 id=\"Dagger2的好处\"><a href=\"#Dagger2的好处\" class=\"headerlink\" title=\"Dagger2的好处\"></a>Dagger2的好处</h3><ul>\n<li>依赖的注入和配置独立于组件之外。</li>\n<li>因为对象是在一个独立、不耦合的地方初始化，所以当注入抽象方法的时候，我们只需要修改对象的实现方法，而不用大改代码库。</li>\n<li>依赖可以注入到一个组件中：我们可以注入这些依赖的模拟实现，这样使得测试更加简单。</li>\n</ul>\n<h3 id=\"相关标签\"><a href=\"#相关标签\" class=\"headerlink\" title=\"相关标签\"></a>相关标签</h3><p> <strong>@Inject、@Module、@Provide、@Component</strong></p>\n<ul>\n<li><p>@Inject: 通常在需要依赖的地方使用这个注解。换句话说，你用它告诉Dagger这个类或者字段需要依赖注入。这样，Dagger就会构造一个这个类的实例并满足他们的依赖。</p>\n</li>\n<li><p>@Module: Modules类里面的方法专门提供依赖，所以我们定义一个类，用@Module注解，这样Dagger在构造类的实例的时候，就知道从哪里去找到需要的依赖。modules的一个重要特征是它们设计为分区并组合在一起（比如说，在我们的app中可以有多个组成在一起的modules）。</p>\n</li>\n<li><p>@Provide: 在modules中，我们定义的方法是用这个注解，以此来告诉Dagger我们想要构造对象并提供这些依赖。</p>\n</li>\n<li><p>@Component: Components从根本上来说就是一个注入器，也可以说是@Inject和@Module的桥梁，它的主要作用就是连接这两个部分。 Components可以提供所有定义了的类型的实例，比如：我们必须用@Component注解一个接口然后列出所有的@Modules组成该组件，如果缺失了任何一块都会在编译的时候报错。所有的组件都可以通过它的modules知道依赖的范围。</p>\n</li>\n</ul>\n<h3 id=\"标签使用方式\"><a href=\"#标签使用方式\" class=\"headerlink\" title=\"标签使用方式\"></a>标签使用方式</h3><p><strong>1.@Inject</strong>  </p>\n<pre><code>public class User {  \n\n    ....  \n    ....  \n    //在被依赖类中使用@Inject标记该类的构造方法\n    @Inject  \n    public User() {  \n    }  \n\n    ....  \n    ....    \n}  \n</code></pre><hr>\n<pre><code>public class MainActivity extends AppCompatActivity {  \n\n    //在依赖类中使用@Inject来注入被依赖类实例\n    @Inject  \n    User user;  \n    @Inject  \n    User user2;  \n    private TextView tv;  \n    private TextView tv2;  \n\n    @Override  \n    protected void onCreate(Bundle savedInstanceState) {  \n        super.onCreate(savedInstanceState);  \n        setContentView(R.layout.activity_main);  \n        //实例component，并通过其inject（）方法来对成员变量（通过@Inject进行表述的）进行赋值\n        DaggerActivityComponent.builder().build().inject(this);  \n        tv = ((TextView) findViewById(R.id.tv));  \n        tv2 = ((TextView) findViewById(R.id.tv2));  \n        tv.setText(user.toString());  \n        tv2.setText(user2.toString());  \n    }  \n} \n</code></pre><p><strong>2.@Component</strong></p>\n<pre><code>@Component  \npublic interface ActivityComponent {  \n    void inject(MainActivity activity);  \n}  \n</code></pre><p><strong>3.@Provider &amp; @Module</strong></p>\n<pre><code>@Module  \npublic class UserModule {  \n    @Provides\n    User providesUser() {  \n        return new User();  \n    }  \n}  \n</code></pre><h3 id=\"注入方式\"><a href=\"#注入方式\" class=\"headerlink\" title=\"注入方式\"></a>注入方式</h3><ul>\n<li>构造方法注入：在类的构造方法前面注释@Inject</li>\n<li>成员变量注入：在类的成员变量（非私有）前面注释@Inject</li>\n<li>函数方法注入：在函数前面注释@Inject</li>\n</ul>\n<h3 id=\"不同类的关系\"><a href=\"#不同类的关系\" class=\"headerlink\" title=\"不同类的关系\"></a>不同类的关系</h3><p><img src=\"http://or9mw8j7a.bkt.clouddn.com/%E6%9C%AA%E6%A0%87%E9%A2%98-2-%E6%81%A2%E5%A4%8D%E7%9A%84.png\" alt=\"enter image description here\"></p>\n<h3 id=\"编译后的生成文件与原文件及关系图\"><a href=\"#编译后的生成文件与原文件及关系图\" class=\"headerlink\" title=\"编译后的生成文件与原文件及关系图\"></a>编译后的生成文件与原文件及关系图</h3><p><strong>原文件</strong><br><img src=\"http://or9mw8j7a.bkt.clouddn.com/%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20170818105449.png\" alt=\"enter image description here\"></p>\n<p><strong>生成文件</strong><br><img src=\"http://or9mw8j7a.bkt.clouddn.com/%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20170818105426.png\" alt=\"enter image description here\"></p>\n<p><strong>各文件对应关系</strong><br><img src=\"http://or9mw8j7a.bkt.clouddn.com/%E7%BC%96%E8%AF%91%E5%90%8E%E5%85%B3%E7%B3%BB%E5%9B%BE.png\" alt=\"enter image description here\"></p>\n<h3 id=\"注入路径\"><a href=\"#注入路径\" class=\"headerlink\" title=\"注入路径\"></a>注入路径</h3><p><img src=\"http://or9mw8j7a.bkt.clouddn.com/%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20170818112230.png\" alt=\"enter image description here\"></p>\n<p><img src=\"http://or9mw8j7a.bkt.clouddn.com/%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20170818111938.png\" alt=\"enter image description here\"></p>\n<p><img src=\"http://or9mw8j7a.bkt.clouddn.com/%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20170818112629.png\" alt=\"enter image description here\"></p>\n<h3 id=\"Scope（用于划分作用域）\"><a href=\"#Scope（用于划分作用域）\" class=\"headerlink\" title=\"@Scope（用于划分作用域）\"></a>@Scope（用于划分作用域）</h3><p><strong>javax包中自带的@Singleton,其class如下：</strong></p>\n<p><img src=\"http://or9mw8j7a.bkt.clouddn.com/%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20170818113850.png\" alt=\"enter image description here\"></p>\n<p><strong>用户自己写的</strong></p>\n<p><img src=\"http://or9mw8j7a.bkt.clouddn.com/%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20170818114133.png\" alt=\"enter image description here\"></p>\n<p><strong><em>可以看出除了少了@Documented标签外，用户自己写的Scope标签和@Singleton并没有本质的区别</em></strong></p>\n<h4 id=\"各标签的意义\"><a href=\"#各标签的意义\" class=\"headerlink\" title=\"各标签的意义\"></a>各标签的意义</h4><p><strong>@Retention</strong></p>\n<p>Retention(保留)注解说明,这种类型的注解会被保留到那个阶段. 有三个值:<br>1.RetentionPolicy.SOURCE —— 这种类型的Annotations只在源代码级别保留,编译时就会被忽略<br>2.RetentionPolicy.CLASS —— 这种类型的Annotations编译时被保留,在class文件中存在,但JVM将会忽略<br>3.RetentionPolicy.RUNTIME —— 这种类型的Annotations将被JVM保留,所以他们能在运行时被JVM或其他使用反射机制的代码所读取和使用.</p>\n<p><strong>@Documented</strong></p>\n<p>Documented 注解表明这个注解应该被 javadoc工具记录. 默认情况下,javadoc是不包括注解的. 但如果声明注解时指定了 @Documented,则它会被 javadoc 之类的工具处理, 所以注解类型信息也会被包括在生成的文档中. 示例6进一步演示了使用 </p>\n<p><strong>@Scope</strong></p>\n<p><img src=\"http://or9mw8j7a.bkt.clouddn.com/%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20170818114808.png\" alt=\"enter image description here\"></p>\n<h3 id=\"Singleton的单例模式是如何起作用的（我只是个栗子）\"><a href=\"#Singleton的单例模式是如何起作用的（我只是个栗子）\" class=\"headerlink\" title=\"@Singleton的单例模式是如何起作用的（我只是个栗子）\"></a>@Singleton的单例模式是如何起作用的（我只是个栗子）</h3><p>该单例模式的前提是所使用的Component实例是同一个的情况下，而且任何自定义的Scope标签都有相同功能，具体实现如下：</p>\n<p><img src=\"http://or9mw8j7a.bkt.clouddn.com/%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20170818141827.png\" alt=\"enter image description here\"></p>\n<p><img src=\"http://or9mw8j7a.bkt.clouddn.com/%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20170818142004.png\" alt=\"enter image description here\"></p>\n<h3 id=\"Qualifier的巧用（指哪打哪）\"><a href=\"#Qualifier的巧用（指哪打哪）\" class=\"headerlink\" title=\"@Qualifier的巧用（指哪打哪）\"></a>@Qualifier的巧用（指哪打哪）</h3><p>@Qualifier是用来给注解做注解的。它告诉Dagger依赖需求方 创建数据的时候使用哪个依赖提供方。</p>\n<p>两个@Qualifier</p>\n<pre><code>@Qualifier\npublic @interface ThemeNight {\n\n}\n\n@Qualifier\npublic @interface ThemeDay {\n}\n</code></pre><hr>\n<pre><code>@Module\npublic class ThemeModule {\n    @Provides\n    @ThemeDay\n    Theme provideDayTheme() {\n        return new Theme(&quot;day&quot;);\n    }\n\n    @Provides\n    @ThemeNight\n    Theme provideNightTheme() {\n        return new Theme(&quot;night&quot;);\n    }\n}\n</code></pre><hr>\n<pre><code>@Component\npublic interface ThemeComponent{\n    void inject(ThemeTest themeTest);\n}\n</code></pre><hr>\n<pre><code>public class ThemeTest {\n    @Inject\n    @ThemeDay\n    Theme dayTheme;\n    @Inject\n    @ThemeNight\n    Theme nightTheme;\n\n    public static void main(String[] arg) {\n        ThemeTest themeTest = new ThemeTest();\n        DaggerThemeComponent.create().inject(themeTest);\n        System.out.println(themeTest.dayTheme.themeName);\n        System.out.println(themeTest.nightTheme.themeName);\n    }\n}\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<p>[TOC]</p>\n<h3 id=\"Dagger2的好处\"><a href=\"#Dagger2的好处\" class=\"headerlink\" title=\"Dagger2的好处\"></a>Dagger2的好处</h3><ul>\n<li>依赖的注入和配置独立于组件之外。</li>\n<li>因为对象是在一个独立、不耦合的地方初始化，所以当注入抽象方法的时候，我们只需要修改对象的实现方法，而不用大改代码库。</li>\n<li>依赖可以注入到一个组件中：我们可以注入这些依赖的模拟实现，这样使得测试更加简单。</li>\n</ul>\n<h3 id=\"相关标签\"><a href=\"#相关标签\" class=\"headerlink\" title=\"相关标签\"></a>相关标签</h3><p> <strong>@Inject、@Module、@Provide、@Component</strong></p>\n<ul>\n<li><p>@Inject: 通常在需要依赖的地方使用这个注解。换句话说，你用它告诉Dagger这个类或者字段需要依赖注入。这样，Dagger就会构造一个这个类的实例并满足他们的依赖。</p>\n</li>\n<li><p>@Module: Modules类里面的方法专门提供依赖，所以我们定义一个类，用@Module注解，这样Dagger在构造类的实例的时候，就知道从哪里去找到需要的依赖。modules的一个重要特征是它们设计为分区并组合在一起（比如说，在我们的app中可以有多个组成在一起的modules）。</p>\n</li>\n<li><p>@Provide: 在modules中，我们定义的方法是用这个注解，以此来告诉Dagger我们想要构造对象并提供这些依赖。</p>\n</li>\n<li><p>@Component: Components从根本上来说就是一个注入器，也可以说是@Inject和@Module的桥梁，它的主要作用就是连接这两个部分。 Components可以提供所有定义了的类型的实例，比如：我们必须用@Component注解一个接口然后列出所有的@Modules组成该组件，如果缺失了任何一块都会在编译的时候报错。所有的组件都可以通过它的modules知道依赖的范围。</p>\n</li>\n</ul>\n<h3 id=\"标签使用方式\"><a href=\"#标签使用方式\" class=\"headerlink\" title=\"标签使用方式\"></a>标签使用方式</h3><p><strong>1.@Inject</strong>  </p>\n<pre><code>public class User {  \n\n    ....  \n    ....  \n    //在被依赖类中使用@Inject标记该类的构造方法\n    @Inject  \n    public User() {  \n    }  \n\n    ....  \n    ....    \n}  \n</code></pre><hr>\n<pre><code>public class MainActivity extends AppCompatActivity {  \n\n    //在依赖类中使用@Inject来注入被依赖类实例\n    @Inject  \n    User user;  \n    @Inject  \n    User user2;  \n    private TextView tv;  \n    private TextView tv2;  \n\n    @Override  \n    protected void onCreate(Bundle savedInstanceState) {  \n        super.onCreate(savedInstanceState);  \n        setContentView(R.layout.activity_main);  \n        //实例component，并通过其inject（）方法来对成员变量（通过@Inject进行表述的）进行赋值\n        DaggerActivityComponent.builder().build().inject(this);  \n        tv = ((TextView) findViewById(R.id.tv));  \n        tv2 = ((TextView) findViewById(R.id.tv2));  \n        tv.setText(user.toString());  \n        tv2.setText(user2.toString());  \n    }  \n} \n</code></pre><p><strong>2.@Component</strong></p>\n<pre><code>@Component  \npublic interface ActivityComponent {  \n    void inject(MainActivity activity);  \n}  \n</code></pre><p><strong>3.@Provider &amp; @Module</strong></p>\n<pre><code>@Module  \npublic class UserModule {  \n    @Provides\n    User providesUser() {  \n        return new User();  \n    }  \n}  \n</code></pre><h3 id=\"注入方式\"><a href=\"#注入方式\" class=\"headerlink\" title=\"注入方式\"></a>注入方式</h3><ul>\n<li>构造方法注入：在类的构造方法前面注释@Inject</li>\n<li>成员变量注入：在类的成员变量（非私有）前面注释@Inject</li>\n<li>函数方法注入：在函数前面注释@Inject</li>\n</ul>\n<h3 id=\"不同类的关系\"><a href=\"#不同类的关系\" class=\"headerlink\" title=\"不同类的关系\"></a>不同类的关系</h3><p><img src=\"http://or9mw8j7a.bkt.clouddn.com/%E6%9C%AA%E6%A0%87%E9%A2%98-2-%E6%81%A2%E5%A4%8D%E7%9A%84.png\" alt=\"enter image description here\"></p>\n<h3 id=\"编译后的生成文件与原文件及关系图\"><a href=\"#编译后的生成文件与原文件及关系图\" class=\"headerlink\" title=\"编译后的生成文件与原文件及关系图\"></a>编译后的生成文件与原文件及关系图</h3><p><strong>原文件</strong><br><img src=\"http://or9mw8j7a.bkt.clouddn.com/%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20170818105449.png\" alt=\"enter image description here\"></p>\n<p><strong>生成文件</strong><br><img src=\"http://or9mw8j7a.bkt.clouddn.com/%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20170818105426.png\" alt=\"enter image description here\"></p>\n<p><strong>各文件对应关系</strong><br><img src=\"http://or9mw8j7a.bkt.clouddn.com/%E7%BC%96%E8%AF%91%E5%90%8E%E5%85%B3%E7%B3%BB%E5%9B%BE.png\" alt=\"enter image description here\"></p>\n<h3 id=\"注入路径\"><a href=\"#注入路径\" class=\"headerlink\" title=\"注入路径\"></a>注入路径</h3><p><img src=\"http://or9mw8j7a.bkt.clouddn.com/%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20170818112230.png\" alt=\"enter image description here\"></p>\n<p><img src=\"http://or9mw8j7a.bkt.clouddn.com/%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20170818111938.png\" alt=\"enter image description here\"></p>\n<p><img src=\"http://or9mw8j7a.bkt.clouddn.com/%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20170818112629.png\" alt=\"enter image description here\"></p>\n<h3 id=\"Scope（用于划分作用域）\"><a href=\"#Scope（用于划分作用域）\" class=\"headerlink\" title=\"@Scope（用于划分作用域）\"></a>@Scope（用于划分作用域）</h3><p><strong>javax包中自带的@Singleton,其class如下：</strong></p>\n<p><img src=\"http://or9mw8j7a.bkt.clouddn.com/%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20170818113850.png\" alt=\"enter image description here\"></p>\n<p><strong>用户自己写的</strong></p>\n<p><img src=\"http://or9mw8j7a.bkt.clouddn.com/%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20170818114133.png\" alt=\"enter image description here\"></p>\n<p><strong><em>可以看出除了少了@Documented标签外，用户自己写的Scope标签和@Singleton并没有本质的区别</em></strong></p>\n<h4 id=\"各标签的意义\"><a href=\"#各标签的意义\" class=\"headerlink\" title=\"各标签的意义\"></a>各标签的意义</h4><p><strong>@Retention</strong></p>\n<p>Retention(保留)注解说明,这种类型的注解会被保留到那个阶段. 有三个值:<br>1.RetentionPolicy.SOURCE —— 这种类型的Annotations只在源代码级别保留,编译时就会被忽略<br>2.RetentionPolicy.CLASS —— 这种类型的Annotations编译时被保留,在class文件中存在,但JVM将会忽略<br>3.RetentionPolicy.RUNTIME —— 这种类型的Annotations将被JVM保留,所以他们能在运行时被JVM或其他使用反射机制的代码所读取和使用.</p>\n<p><strong>@Documented</strong></p>\n<p>Documented 注解表明这个注解应该被 javadoc工具记录. 默认情况下,javadoc是不包括注解的. 但如果声明注解时指定了 @Documented,则它会被 javadoc 之类的工具处理, 所以注解类型信息也会被包括在生成的文档中. 示例6进一步演示了使用 </p>\n<p><strong>@Scope</strong></p>\n<p><img src=\"http://or9mw8j7a.bkt.clouddn.com/%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20170818114808.png\" alt=\"enter image description here\"></p>\n<h3 id=\"Singleton的单例模式是如何起作用的（我只是个栗子）\"><a href=\"#Singleton的单例模式是如何起作用的（我只是个栗子）\" class=\"headerlink\" title=\"@Singleton的单例模式是如何起作用的（我只是个栗子）\"></a>@Singleton的单例模式是如何起作用的（我只是个栗子）</h3><p>该单例模式的前提是所使用的Component实例是同一个的情况下，而且任何自定义的Scope标签都有相同功能，具体实现如下：</p>\n<p><img src=\"http://or9mw8j7a.bkt.clouddn.com/%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20170818141827.png\" alt=\"enter image description here\"></p>\n<p><img src=\"http://or9mw8j7a.bkt.clouddn.com/%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20170818142004.png\" alt=\"enter image description here\"></p>\n<h3 id=\"Qualifier的巧用（指哪打哪）\"><a href=\"#Qualifier的巧用（指哪打哪）\" class=\"headerlink\" title=\"@Qualifier的巧用（指哪打哪）\"></a>@Qualifier的巧用（指哪打哪）</h3><p>@Qualifier是用来给注解做注解的。它告诉Dagger依赖需求方 创建数据的时候使用哪个依赖提供方。</p>\n<p>两个@Qualifier</p>\n<pre><code>@Qualifier\npublic @interface ThemeNight {\n\n}\n\n@Qualifier\npublic @interface ThemeDay {\n}\n</code></pre><hr>\n<pre><code>@Module\npublic class ThemeModule {\n    @Provides\n    @ThemeDay\n    Theme provideDayTheme() {\n        return new Theme(&quot;day&quot;);\n    }\n\n    @Provides\n    @ThemeNight\n    Theme provideNightTheme() {\n        return new Theme(&quot;night&quot;);\n    }\n}\n</code></pre><hr>\n<pre><code>@Component\npublic interface ThemeComponent{\n    void inject(ThemeTest themeTest);\n}\n</code></pre><hr>\n<pre><code>public class ThemeTest {\n    @Inject\n    @ThemeDay\n    Theme dayTheme;\n    @Inject\n    @ThemeNight\n    Theme nightTheme;\n\n    public static void main(String[] arg) {\n        ThemeTest themeTest = new ThemeTest();\n        DaggerThemeComponent.create().inject(themeTest);\n        System.out.println(themeTest.dayTheme.themeName);\n        System.out.println(themeTest.nightTheme.themeName);\n    }\n}\n</code></pre>"}],"PostAsset":[],"PostCategory":[{"post_id":"cjdb2hwev0000w4ie3k11iwq1","category_id":"cjdb2k7im000020ie3bo1cdfo","_id":"cjdb2k7io000320ie0y0kta1x"}],"PostTag":[{"post_id":"cjdb2hwev0000w4ie3k11iwq1","tag_id":"cjdb2k7in000120iewup878m4","_id":"cjdb2k7ip000520ievmb0ywm1"},{"post_id":"cjdb2hwev0000w4ie3k11iwq1","tag_id":"cjdb2k7io000220ie768zps2c","_id":"cjdb2k7iq000620ier2lorkb3"},{"post_id":"cjdb2hwev0000w4ie3k11iwq1","tag_id":"cjdb2k7io000420iey5ryzi12","_id":"cjdb2k7iq000720ie86roqu78"}],"Tag":[{"name":"标签1","_id":"cjdb2hwf30002w4ie01ys4p11"},{"name":"标签2","_id":"cjdb2hwf40003w4iend5rf0pc"},{"name":"Android","_id":"cjdb2k7in000120iewup878m4"},{"name":"三方框架","_id":"cjdb2k7io000220ie768zps2c"},{"name":"技术","_id":"cjdb2k7io000420iey5ryzi12"}]}}